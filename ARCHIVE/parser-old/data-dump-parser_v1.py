# Project Sentinel: TiM781 Log File Parser 
# Harris M 
# October 21, 2019 

# LIBRARIES 
import re

# Log file location 
sample_file = '../sample_logs/Test_10-16-19.log'

# Global array/variable instantiation
raw_objects = [] 
pruned_objects = []
clean_objects = []
garbage_count = 9

command_type = {'73524e': 'Read',
                '73574e': 'Write',
                '734d4e': 'Method',
                '73454e': 'Event',
                '735241': 'Answer',
                '735741': 'Answer',
                '73414e': 'Answer',
                '734541': 'Answer',
                '73534e': 'Answer'}

# Function: load_file
# Description: Loads a log file generated by the TiM781 sensor
def load_file(file):
    file_length = 0
    try:
        with open(file, "r") as f:
            for line in f:
                raw_objects.append(line)
    except IOError:
        print("Error: Couldn't open the specified file.")

# Function: prune_objects
# Description: Splits the raw data into indices of an array
#              efficiently by using a regular expression
def prune_objects():
    load_file(sample_file)

    for raw_object in raw_objects:
        prune = re.findall('[<0-9a-z>]+', raw_object) # This regular expression isn't perfect, so I account for that in the next for loop
        pruned_objects.append(prune)

    for index in range(len(pruned_objects)):
        if index > 0:
            for i in range(garbage_count):
                arr = pruned_objects[index]
                hold = arr[0]
                arr.remove(hold)

    for index in range(len(pruned_objects)):
        if index > 0:
            raw_string = pruned_objects[index]
            first_replace = raw_string[0].replace('><', ',')
            second_replace = first_replace.replace('<', '')
            third_replace = second_replace.replace('>', '')
            clean_objects.append(third_replace)
            

# Function: parser
# Description: This is the real meat of the parser.
def parser():
    prune_objects()

    count = 0
    for clean_object in clean_objects:
        comma_parse = clean_object.split(',')
        
        for i in range(len(comma_parse)):
            print(comma_parse[i], end = ' ')
        
        print(' ')
        
        if (comma_parse[0] != '02'):
            print('Invalid message detected.')
        else:
            message_chunks = []
            current_message = ''
            for i in range(1, len(comma_parse) - 1):
                if (comma_parse[i] == '20'):
                    message_chunks.append(current_message)
                    current_message = ''
                elif (comma_parse[i] == '03'):
                    message_chunks.append(current_message)
                    break
                else:
                    current_message += comma_parse[i]

            for i in range(len(message_chunks)):
                print(message_chunks[i])
        
        if count == 2:
            break
        else:
            count = count + 1
                   
parser()


