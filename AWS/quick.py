from __future__ import print_function # Python 2/3 compatibility
import boto3
import json
import decimal
from boto3.dynamodb.conditions import Key, Attr

dynamodb = boto3.resource('dynamodb', region_name='us-east-2', endpoint_url='http://dynamodb.us-east-2.amazonaws.com')
table = dynamodb.Table('SENTINEL')

response = table.put_item(
        Item={
        'Name': 'Scan 1',
        'Count': '1'
    }
    )

def uploadToAWS(name, count):
    """ Uploads a scan to the AWS database

        Args:
            A parsed telegram from the sensor 
        Return:
            None
    """
    if name == "":
        name = str("Unnamed_" + telegram['Timestamp'])
    
    response = table.put_item(
        Item={
            # 'Time-stamp': str(telegram['Timestamp']),
            'Name': name,
            'Count': str(count),
            'Version Number': str(1),
            'Device Number': str(1),
            'Serial Number': str(198383),
            'Device Status': str(0),
            'Telegram Counter': str(100),
            'Scan Counter': str(68),
            'Time since start-up': str(23487234),
            'Time of transmission': str(23487234),
            'Scan Frequency': str(73),
            'Measurement Frequency': str(2),
            'Amount of Encoder': str(2),
            '16-bit Channels': str(1),
            'Scale Factor': str(23),
            'Scale Factor Offset': str(1),
            'Start Angle': str(3),
            'Angular Increment': str(0.333),
            'Quantity': str(0.7),
            # 'Motor encoder': str(telegram['Motor encoder']),
            'Timestamp': str(2020),
            'Ax': str(0.011),
            'Ay': str(0.12),
            'Az': str(-0.99),
            'Gx': str(12),
            'Gy': str(13),
            'Gz': str(14),
            'Measurement': str([3097, 3064, 3010, 3008, 3011, 3009, 3029, 3036, 3001, 3047, 2, 965, 863, 658, 682, 675, 679, 651, 648, 664, 634, 660, 644, 638, 644, 616, 614, 595, 629, 592, 574, 580, 582, 595, 568, 601, 566, 568, 600, 611, 633, 630, 633, 653, 651, 661, 676, 635, 648, 632, 660, 634, 646, 641, 622, 653, 653, 623, 613, 640, 620, 641, 643, 612, 632, 587, 589, 598, 605, 640, 621, 599, 616, 604, 601, 606, 604, 610, 579, 597, 608, 600, 584, 588, 596, 604, 586, 605, 585, 580, 596, 594, 602, 582, 595, 604, 558, 552, 581, 562, 584, 591, 572, 574, 549, 569, 562, 583, 567, 575, 572, 576, 570, 574, 580, 585, 569, 571, 574, 575, 576, 562, 550, 561, 570, 565, 550, 574, 587, 558, 555, 583, 573, 573, 554, 566, 585, 526, 575, 584, 577, 562, 583, 562, 559, 540, 576, 559, 566, 599, 568, 580, 576, 551, 569, 574, 591, 567, 572, 560, 586, 587, 602, 589, 546, 570, 568, 587, 564, 579, 585, 592, 570, 580, 588, 584, 588, 581, 572, 598, 592, 573, 594, 611, 596, 585, 589, 597, 595, 619, 609, 598, 613, 603, 622, 569, 599, 602, 616, 611, 601, 577, 623, 627, 616, 619, 612, 635, 636, 604, 630, 634, 643, 639, 607, 613, 636, 642, 632, 644, 645, 644, 639, 640, 622, 665, 643, 670, 667, 659, 622, 664, 676, 696, 691, 672, 672, 665, 677, 696, 713, 690, 677, 698, 705, 696, 735, 710, 731, 738, 750, 723, 753, 744, 747, 734, 737, 716, 777, 776, 765, 771, 761, 776, 784, 780, 783, 816, 796, 791, 781, 771, 768, 774, 767, 775, 782, 778, 772, 789, 795, 792, 808, 826, 817, 833, 840, 835, 849, 844, 862, 870, 874, 863, 889, 895, 898, 915, 928, 918, 917, 953, 934, 962, 967, 971, 972, 989, 993, 1005, 1015, 1053, 1039, 1046, 1061, 1067, 1112, 1098, 1130, 1141, 1118, 1146, 1173, 1168, 1194, 1202, 1201, 1212, 1257, 1262, 1280, 1316, 1305, 1354, 1347, 1366, 1407, 1408, 1427, 1441, 1505, 1491, 1534, 1527, 1577, 1603, 1614, 1640, 1679, 1722, 1719, 1774, 1824, 1865, 1887, 1929, 1975, 2012, 2056, 2089, 2154, 2230, 2263, 2329, 2358, 2425, 2602, 3505, 3511, 3508, 3483, 3498, 3489, 3492, 3474, 3469, 3472, 3455, 3463, 3441, 3445, 3444, 3438, 3443, 3444, 3438, 3419, 3431, 3434, 3439, 3429, 3426, 3428, 3415, 3416, 3414, 3410, 3405, 3417, 3417, 3403, 3354, 3333, 3313, 3320, 3307, 3311, 3306, 3318, 3306, 3305, 3313, 3301, 3320, 3322, 3305, 3303, 3313, 3315, 3319, 3336, 3315, 3269, 3316, 3298, 3325, 3324, 3354, 3338, 3299, 3330, 3339, 3357, 3332, 3234, 3112, 3022, 2944, 2898, 2792, 2726, 2614, 2564, 2484, 2450, 2380, 2337, 2290, 2213, 2190, 2144, 2087, 2035, 1875, 1788, 1764, 1709, 1687, 1666, 1680, 1674, 1656, 1675, 1679, 1670, 1690, 1683, 1693, 1672, 1668, 1654, 1617, 1593, 1575, 1545, 1548, 1516, 1491, 1475, 1463, 1438, 1424, 1400, 1362, 1365, 1358, 1321, 1319, 1278, 1286, 1262, 1258, 1200, 1205, 1198, 1172, 1140, 1143, 1104, 1107, 1075, 1033, 943, 944, 907, 915, 908, 931, 916, 902, 906, 901, 873, 875, 864, 855, 845, 839, 827, 824, 818, 800, 818, 819, 783, 784, 769, 771, 773, 755, 737, 768, 757, 754, 742, 749, 730, 737, 728, 687, 679, 689, 673, 657, 681, 699, 687, 692, 673, 645, 664, 654, 676, 650, 656, 640, 624, 643, 643, 638, 632, 622, 608, 595, 595, 629, 582, 610, 596, 597, 590, 601, 586, 571, 591, 565, 570, 556, 573, 567, 570, 549, 557, 555, 536, 557, 537, 548, 540, 540, 490, 533, 511, 512, 537, 536, 533, 526, 514, 495, 521, 499, 521, 509, 471, 506, 508, 465, 505, 509, 488, 474, 478, 497, 483, 475, 492, 448, 481, 484, 476, 477, 471, 481, 482, 460, 456, 485, 471, 470, 481, 475, 454, 471, 442, 461, 444, 448, 446, 462, 446, 441, 467, 452, 467, 451, 442, 429, 435, 451, 433, 454, 454, 402, 443, 450, 447, 438, 437, 448, 463, 458, 442, 461, 442, 439, 446, 420, 443, 442, 432, 449, 433, 418, 438, 432, 441, 435, 446, 413, 440, 405, 422, 435, 421, 422, 426, 401, 396, 433, 422, 432, 410, 430, 454, 418, 427, 433, 450, 435, 414, 429, 435, 434, 423, 428, 428, 408, 431, 448, 442, 405, 428, 448, 434, 444, 435, 435, 447, 441, 444, 413, 439, 422, 432, 431, 429, 435, 427, 449, 437, 430, 463, 386, 439, 444, 416, 455, 470, 453, 450, 446, 446, 422, 441, 447, 436, 476, 445, 460, 454, 456, 415, 419, 445, 461, 437, 460, 428, 430, 472, 449, 459, 458, 439, 454, 465, 458, 449, 455, 455, 460, 454, 433, 415, 405, 390, 424, 398, 394, 378, 380, 396, 376, 401, 425, 404, 429, 433, 455, 426, 444, 429, 420, 455, 467, 448, 461, 460, 469, 456, 485, 474, 484, 497, 468, 496, 521, 513, 502, 529])
        }
    )

def readFromAWS(name):
        """ Grabs all scans associated with a certain name

            Args:
                Name we are interested in 
            Return:
                A list of dictionaries 
        """

        output = []

        response = table.query(KeyConditionExpression=Key('Name').eq(name))

        for scan in response['Items']:
            output.append(scan)

        return output 

# response = table.query(
#     KeyConditionExpression=Key('Time-stamp').eq('Yeet')
# )


# for i in response['Items']:
#     print(type(i))
# name = input("Enter the name of the scan: ")
# count = input("Enter the count of the scan: ")
# uploadToAWS(name, count)

output = readFromAWS('Test')
print(output)